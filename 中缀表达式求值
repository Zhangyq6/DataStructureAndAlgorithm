总时间限制: 500ms 内存限制: 32768kB
描述
求一个可能包含加、减、乘、除、乘方运算的中缀表达式的值。

在计算机中，我们常用栈来解决这一问题。首先将中缀表达式转换到后缀表达式，然后对后缀表达式求值。

加、减、乘、除、乘方分别用+，-，*, /, ^来表示。表达式可以有圆括号()。

输入
第一行为测试数据的组数N。
接下来的N行，每行是一个中缀表达式。

每个表达式中，圆括号、运算符和运算数相互之间都用空格分隔，运算数是整数。一般运算数可正可负（负数的符号和数字之间无空格），指数一定为自然数(0和正整数)。不必考虑除0的情况。每个运算数均可由int放下。不必考虑溢出。中缀表达式的字符串长度不超过600。乘方的优先级比乘除都高，结合性是向左结合，如2 ^ 3 ^ 4表示( 2 ^ 3 ) ^ 4 = 4096。除法的商向下取整。
输出
对每一组测试数据输出一行，为表达式的值
样例输入
2
31 * ( 5 - ( -3 + 25 ) ) + 70 ^ 2
2 * 5 + 6 * ( 7 - 8 ) + 6
样例输出
4373
10
提示
十分抱歉，之前样例数据里少了一个空格，给大家带来不上麻烦。后台的测试数据是严格按照输入的描述制作的，严格有空格。
输出数据每行之间有可能用\n隔开，也有可能用\r\n隔开。输入数据最后一行后可能有换行符，也有可能没有换行符而直接文件结束。大家各种情况都考虑一下。




#include <iostream>
#include <cmath>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <sstream>
using namespace std;

vector<string> postfix;
stack<string> stk;
stack<int> expr;

// 将中缀表达式转化为后缀表达式
void InfixToPostfix()
{
    stringstream expression;
    string tmp;
    getline(cin, tmp);
    expression << tmp;
    string buf;
    // cout << tmp << endl;
    // cout << expression.str() << endl;
    while (expression >> buf)
    {
        // 如果是操作数，直接输入到后缀表达式中
        if (isdigit(buf[0]) || (buf[0] == '-' && isdigit(buf[1])))
        {
            postfix.push_back(buf);
            continue;
        }
        switch (buf[0])
        {

        // 如果是左括号，直接压栈
        case '(':
            stk.push(buf);
            break;

        // 如果是右括号，依次弹出至遇到左括号
        case ')':
            while (stk.top()[0] != '(')
            {
                postfix.push_back(stk.top());
                stk.pop();
            }
            stk.pop();
            break;

        // 如果是正常的操作符——栈非空&&栈顶不是左括号&&输入的操作符优先级小于等于栈顶操作符的优先级——将栈顶运算符弹出至后缀表达式中
        // 加减优先级最低归为一类
        case '+':
        case '-':
            while (!stk.empty() && stk.top()[0] != '(')
            {
                postfix.push_back(stk.top());
                stk.pop();
            }
            stk.push(buf);
            break;
        // 乘除优先级次高，归为第二类
        case '*':
        case '/':
            while (!stk.empty() && stk.top()[0] != '(' && stk.top()[0] != '+' && stk.top()[0] != '-')
            {
                postfix.push_back(stk.top());
                stk.pop();
            }
            stk.push(buf);
            break;
        // 乘方的优先级最高
        case '^':
            while (!stk.empty() && stk.top()[0] != '(' && stk.top()[0] == '^')
            {
                postfix.push_back(stk.top());
                stk.pop();
            }
            stk.push(buf);
            break;
        default:
            break;
        }
    }
    // 当中缀表达式的所有操作符全部读入后，若栈中还有元素，依次弹出至后缀表达式中
    while (!stk.empty())
    {
        postfix.push_back(stk.top());
        stk.pop();
    }
}

// 对后缀表达式求值
int PostfixValue()
{
    for (int i = 0; i < postfix.size(); ++i)
    {
        string buf = postfix[i];
        // 数字——压栈
        if (isdigit(buf[0]) || (buf[0] == '-' && isdigit(buf[1])))
        {
            int ope = stoi(buf);
            expr.push(ope);
        }

        // 操作符——弹栈
        else
        {
            int ope1 = expr.top();
            expr.pop();
            int ope2 = expr.top();
            expr.pop();
            int res = 0;
            switch (buf[0])
            {
            case '+':
                res = ope1 + ope2;
                break;
            case '-':
                res = ope2 - ope1;
                break;
            case '*':
                res = ope1 * ope2;
                break;
            case '/':
                res = ope2 / ope1;
                break;
            case '^':
                res = pow(ope2, ope1);
                break;
            }
            expr.push(res);
        }
    }
    return expr.top();
}

int main()
{

    // 数据读入部分
    int N = 0;
    cin >> N;
    cin.ignore();
    while (N--)
    {
        postfix.clear();
        while (!stk.empty())
            stk.pop();
        while (!expr.empty())
            expr.pop();
        InfixToPostfix();
        int result = PostfixValue();
        cout << result << endl;
    }
    return 0;
}
