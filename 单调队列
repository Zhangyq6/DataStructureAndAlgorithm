总时间限制: 12000ms 内存限制: 65536kB
描述
给定一个长度为n（n<=10^6）的数组。有一个大小为k的滑动窗口从数组的最左端移动到最右端。你可以看到窗口中的k个数字。窗口每次向右滑动一个数字的距离。
下面是一个例子：
数组是 [1 3 -1 -3 5 3 6 7]， k = 3。

窗口位置	最小值	最大值
[1  3  -1] -3  5  3  6  7 	-1	3
 1 [3  -1  -3] 5  3  6  7 	-3	3
 1  3 [-1  -3  5] 3  6  7 	-3	5
 1  3  -1 [-3  5  3] 6  7 	-3	5
 1  3  -1  -3 [5  3  6] 7 	3	6
 1  3  -1  -3  5 [3  6  7]	3	7


你的任务是得到滑动窗口在每个位置时的最大值和最小值。


输入
输入包括两行。
第一行包括n和k，分别表示数组的长度和窗口的大小。
第二行包括n个数字。
输出
输出包括两行。
第一行包括窗口从左至右移动的每个位置的最小值。
第二行包括窗口从左至右移动的每个位置的最大值。
样例输入
8 3
1 3 -1 -3 5 3 6 7
样例输出
-1 -3 -3 -3 3 3
3 3 5 5 6 7




#include <iostream>
#include <cmath>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <deque>
using namespace std;
int arr[1100000] = {0};
vector<int> min_arr;
vector<int> max_arr;
deque<int> Min;
deque<int> Max;

int main()
{
    // 数据读入部分
    int n = 0, k = 0;
    cin >> n >> k;
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    // 构建单调队列
    // 先求每个位置的最小值
    for (int i = 0; i < n; i++)
    {
        // 删除已经不在窗口内的元素
        if (!Min.empty() && i >= k && Min.front() == arr[i - k])
            Min.pop_front();
        // 对于每一个元素，在入队列前要删除所有比它大的数字，因为这些数字一定用不到
        while (!Min.empty() && Min.back() > arr[i])
            Min.pop_back();
        // 将该元素入队列
        Min.push_back(arr[i]);
        // 如果i>=k-1，则将最小的元素压入min_arr中
        if (i >= k - 1)
            min_arr.push_back(Min.front());
    }

    // 同理求每个位置的最大值
    for (int i = 0; i < n; ++i)
    {
        if (!Max.empty() && i >= k && Max.front() == arr[i - k])
            Max.pop_front();
        while (!Max.empty() && Max.back() < arr[i])
            Max.pop_back();
        Max.push_back(arr[i]);
        if (i >= k - 1)
            max_arr.push_back(Max.front());
    }

    // 数据输出部分
    for (int i = 0; i < n - k + 1; ++i)
        cout << min_arr[i] << " ";
    cout << endl;
    for (int i = 0; i < n - k + 1; ++i)
        cout << max_arr[i] << " ";
    cout << endl;
    return 0;
}
